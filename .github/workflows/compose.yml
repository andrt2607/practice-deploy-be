name: CI/CD Express with Docker Compose

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag version for the release'
        required: true

jobs:
  lint:
    name: Linting Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Run Prettier Check
        run: npx prettier --check --write .

      - name: Run ESLint
        run: npm run lint

  build-and-publish:
    name: Build and Push Docker Image
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Latest Commit
        run: git log -1 --oneline

      - name: Set output release tag
        id: release
        if: github.event_name == 'release'
        run: |
          echo "RELEASE_VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT

      - name: Set output release tag (manual dispatch)
        id: dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "RELEASE_VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GIT_TOKEN }}
          if [ -z "$RELEASE_VERSION" ]; then
            echo "RELEASE_VERSION=main" >> $GITHUB_ENV
          fi
          RELEASE_VERSION="${RELEASE_VERSION#?}"
          echo "Building Docker image with tag: $RELEASE_VERSION"
          docker build --pull --no-cache . -t ghcr.io/${{ github.repository }}/test:latest -t ghcr.io/${{ github.repository }}/test:$RELEASE_VERSION 
          echo "Pushing Docker image with tag: $RELEASE_VERSION"
          docker push ghcr.io/${{ github.repository }}/test:$RELEASE_VERSION
          docker push ghcr.io/${{ github.repository }}/test:latest

  deploy:
    name: Deploy via SSH
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set start time
        id: start-time
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GIT_TOKEN }}
            echo "Removing old images latest..."
            echo "Cleaning up old Docker images..."
            docker pull ghcr.io/${{ github.repository }}/test:latest
            cd project/practice-deploy-be
            git pull origin main
            docker compose down --remove-orphans || true
            echo "Setting environment variables..."
            [[ -z "${{ secrets.POSTGRES_DB }}" ]] && echo "POSTGRES_DB is empty!"
            [[ -z "${{ secrets.POSTGRES_USER }}" ]] && echo "POSTGRES_USER is empty!"
            [[ -z "${{ secrets.POSTGRES_PASSWORD }}" ]] && echo "POSTGRES_PASSWORD is empty!"
            [[ -z "${{ secrets.DATABASE_URL }}" ]] && echo "DATABASE_URL is empty!"
            export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
            export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
            export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            export DATABASE_URL="${{ secrets.DATABASE_URL }}"
            export RELEASE_VERSION_ENV=$RELEASE_VERSION
            # Debugging: Print values
            echo "POSTGRES_DB: $POSTGRES_DB" >> ~/.bashrc
            echo "POSTGRES_USER: $POSTGRES_USER" >> ~/.bashrc
            echo "POSTGRES_PASSWORD: $POSTGRES_PASSWORD" >> ~/.bashrc
            echo "DATABASE_URL: $DATABASE_URL" >> ~/.bashrc
            echo "RELEASE_VERSION_ENV: $RELEASE_VERSION_ENV" >> ~/.bashrc
            source ~/.bashrc
            POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            DATABASE_URL=${{ secrets.DATABASE_URL }} \
            docker compose up -d
      
      - name: Calculate deploy duration
        id: deploy-duration
        run: |
          start_time=${{ steps.start-time.outputs.start_time }}
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          minutes=$((duration / 60))
          seconds=$((duration % 60))
          if [ $minutes -gt 0 ]; then
            formatted_time="${minutes}m ${seconds}s"
          else
            formatted_time="${seconds}s"
          fi
          echo "Deploy duration: $formatted_time"
          echo "formatted_time=$formatted_time" >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            COLOR=3066993 # green
            STATUS_EMOJI="‚úÖ"
          else
            COLOR=15158332 # red
            STATUS_EMOJI="‚ùå"
          fi

          JSON_PAYLOAD=$(cat <<EOF
          {
            "username": "GitHub Actions",
            "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
            "embeds": [{
              "title": "Deployment Status",
              "description": "$STATUS_EMOJI üöÄ Deployment **${{ job.status }}** for branch \`${{ github.ref }}\`",
              "color": $COLOR,
              "fields": [
                { "name": "Repository", "value": "[${{ github.repository }}](https://github.com/${{ github.repository }})", "inline": true },
                { "name": "Commit", "value": "[${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})", "inline": true },
                { "name": "Workflow", "value": "[Read on GitHub Actions](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",   "inline":     false },
                { "name": "‚è± Time to Deploy", "value": "${{ steps.deploy-duration.outputs.formatted_time }}", "inline": true }
              ],
              "footer": { "text": "GitHub Actions | ${{ github.actor }}" }
            }]
          }
          EOF
          )

          curl -X POST "$DISCORD_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD"
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

