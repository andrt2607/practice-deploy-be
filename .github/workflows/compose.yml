name: CI/CD Express with Docker Compose

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag version for the release'
        required: true

jobs:
  lint:
    name: Linting Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Install Prisma CLI
        run: npm install @prisma/client

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Prettier Check
        run: npx prettier --check --write .

      - name: Run ESLint
        run: npm run lint

  build-and-publish:
    name: Build and Push Docker Image
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GIT_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set output release tag
        id: release
        if: github.event_name == 'release'
        run: |
          echo "RELEASE_VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT

      - name: Set output release tag (manual dispatch)
        id: dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "RELEASE_VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: |
          if [ -z "$RELEASE_VERSION" ]; then
            echo "RELEASE_VERSION=main" >> $GITHUB_ENV
          fi
          RELEASE_VERSION="${RELEASE_VERSION#?}"
          echo "Building Docker image with tag: $RELEASE_VERSION"
          docker build . -t ghcr.io/${{ github.repository }}:$RELEASE_VERSION -t ghcr.io/${{ github.repository }}:latest
          echo "Pushing Docker image with tag: $RELEASE_VERSION"
          docker push ghcr.io/${{ github.repository }}:$RELEASE_VERSION
          docker push ghcr.io/${{ github.repository }}:latest

  deploy:
    name: Deploy via SSH
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Pull Latest Changes
        run: git pull origin main

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            RELEASE_VERSION="${{ github.event.inputs.tag || github.event.release.tag_name }}"
            echo "Release Version (before processing): $RELEASE_VERSION"
            RELEASE_VERSION="${RELEASE_VERSION#v}"
            echo "Building pull image with tag: $RELEASE_VERSION"
            if [ -z "$RELEASE_VERSION" ]; then
              echo "Error: RELEASE_VERSION is empty!"
              exit 1
            fi
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GIT_TOKEN }}
            docker pull ghcr.io/${{ github.repository }}:$RELEASE_VERSION
            cd project/practice-deploy-be
            docker compose down || true
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export DATABASE_URL=${{ secrets.DATABASE_URL }}
            export RELEASE_VERSION_ENV=RELEASE_VERSION
            docker compose up -d
